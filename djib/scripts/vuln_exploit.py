import time
import subprocess
import requests
from zapv2 import ZAPv2

def find_zap_executable():
    try:
        # Utiliser find pour localiser l'exécutable ZAP
        result = subprocess.run(['find', '/', '-name', 'zap.sh', '-type', 'f'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        paths = result.stdout.splitlines()
        
        # Retourner le premier chemin trouvé
        if paths:
            return paths[0]
        else:
            print("[!] Aucun exécutable ZAP trouvé.")
            return None
    except Exception as e:
        print(f"[!] Erreur lors de la recherche de ZAP : {e}")
        return None

def is_zap_running(url, retries=10, delay=5):
    # Vérifiez si ZAP est en cours d'exécution
    for _ in range(retries):
        try:
            response = requests.get(f"{url}/JSON/core/action/viewSessionList/")
            if response.status_code == 200:
                return True
        except requests.ConnectionError:
            pass
        print("[*] Attente que ZAP démarre...")
        time.sleep(delay)
    return False

def start_zap(zap_path, zap_port):
    print("[*] Démarrage d'OWASP ZAP...")
    # Lancer ZAP en mode démon
    subprocess.Popen([zap_path, '-daemon', '-port', str(zap_port)])
    time.sleep(30)  # Attendre plus longtemps pour s'assurer que ZAP est complètement opérationnel

def scan_website(target_url):
    print(f"[+] Démarrage du scan sur : {target_url}")

    # Configuration
    api_key = '2u8qa367ng6nsmspkm90etmnfv'  # Optionnel, selon votre configuration ZAP
    zap_url = 'http://localhost:8080'  # URL de l'API ZAP
    zap_port = 8080  # Port sur lequel ZAP écoute

    # Trouver l'exécutable ZAP
    zap_path = find_zap_executable()
    if zap_path is None:
        print("[!] Impossible de trouver l'exécutable ZAP. Veuillez vérifier l'installation.")
        return
    
    # Vérifiez si ZAP est en cours d'exécution, sinon lancez-le
    if not is_zap_running(zap_url):
        start_zap(zap_path, zap_port)
    
    try:
        zap = ZAPv2(apikey=api_key, proxies={'http': zap_url, 'https': zap_url})
        
        # Ouvrir une nouvelle session
        print("[*] Création d'une nouvelle session...")
        zap.core.new_session(name='new_session', overwrite=True)
        
        # Scanner passif
        print("[*] Ouvrir l'URL cible...")
        zap.urlopen(target_url)
        time.sleep(5)  # Attendre un peu que ZAP commence le scan passif
        
        print("[*] Début du scan actif...")
        scan_id = zap.ascan.scan(target_url)
        
        while int(zap.ascan.status(scan_id)) < 100:
            print(f"[+] Progression du scan : {zap.ascan.status(scan_id)}%")
            time.sleep(10)
        
        print("[+] Scan terminé.")
        
        # Obtenir les résultats du scan
        alerts = zap.core.alerts(baseurl=target_url)
        
        if alerts:
            print(f"[+] {len(alerts)} vulnérabilité(s) trouvée(s) sur {target_url} :")
            for alert in alerts:
                print(f"    - {alert['alert']} à {alert['url']}")
        else:
            print("[+] Aucune vulnérabilité trouvée.")
    
    except Exception as e:
        print(f"[!] Erreur : {str(e)}")

if __name__ == '__main__':
    target_url = input("Entrez l'URL de la cible à scanner : ")
    scan_website(target_url)
