import paramiko
from scp import SCPClient
import time

# Fonction pour créer une connexion SSH
def create_ssh_client(server, port, user, password):
    ssh = paramiko.SSHClient()
    ssh.load_system_host_keys()
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    ssh.connect(server, port=port, username=user, password=password)
    return ssh

# Fonction pour transférer le fichier via SCP
def transfer_file(ssh_client, local_file, remote_path):
    try:
        with SCPClient(ssh_client.get_transport()) as scp:
            print(f"\n\033[1;36mTransfert de {local_file} vers {remote_path}...\033[0m")
            scp.put(local_file, remote_path)
            print(f"\n\033[1;32m[✔] Transfert terminé ! Fichier disponible à : {remote_path}\033[0m")
    except Exception as e:
        print(f"\033[1;31mErreur lors du transfert : {e}\033[0m")

# Fonction pour exécuter une commande distante
def execute_remote_command(ssh_client, command):
    try:
        stdin, stdout, stderr = ssh_client.exec_command(command)
        return stdout.read().decode(), stderr.read().decode()
    except Exception as e:
        print(f"\033[1;31mErreur lors de l'exécution du script à distance : {e}\033[0m")
        return "", str(e)

# Fonction pour supprimer le fichier distant
def delete_remote_file(ssh_client, remote_file):
    stdout, stderr = execute_remote_command(ssh_client, f"rm {remote_file}")
    if not stderr:
        print(f"\033[1;32m[✔] Fichier {remote_file} supprimé avec succès.\033[0m")
    else:
        print(f"\033[1;31m[!] Erreur lors de la suppression du fichier : {stderr}\033[0m")
        
def exec_post_exploit():
    print("\n" + "╔" + "═" * 39 + "╗")
    print("║ Exécution du Script Post-Exploitation ║")
    print("╚" + "═" * 39 + "╝")

    # Demander les informations de connexion et de destination
    target_ip = input("\n\033[1;36mEntrez l'IP de la cible : \033[0m")
    port = input("\033[1;36mEntrez le port SSH (par défaut 22) : \033[0m") or 22
    user = input("\033[1;36mEntrez le nom d'utilisateur : \033[0m")
    password = input("\033[1;36mEntrez le mot de passe : \033[0m")
    remote_path = input("\033[1;36mEntrez le chemin distant où déposer le script (ex : /home/user/) : \033[0m")

    # Fichier local à transférer (le script post_exploit)
    local_file = 'includes/post_exploit.py'
    remote_file = f"{remote_path}/post_exploit.py"

    # Création de la connexion SSH
    try:
        print("\n\033[1;36mConnexion au serveur distant...\033[0m")
        ssh_client = create_ssh_client(target_ip, port, user, password)
        print("\033[1;32m[✔] Connexion SSH établie avec succès.\033[0m")
        
        # Transférer le fichier sur la machine cible
        transfer_file(ssh_client, local_file, remote_path)

        # Donner les permissions d'exécution au fichier transféré
        print("\n\033[1;36mRendre le fichier exécutable...\033[0m")
        execute_remote_command(ssh_client, f"chmod +x {remote_file}")
        
        # Exécuter le script post_exploit.py sur la machine distante
        print("\n\033[1;36mExécution du script post_exploit.py...\033[0m")
        stdout, stderr = execute_remote_command(ssh_client, f"python3 {remote_file}")

        if stdout:
            print("\033[1;32m[✔] Résultats de l'exécution du script :\033[0m\n")
            print(stdout)
        if stderr:
            print(f"\033[1;31m[!] Erreurs pendant l'exécution du script :\033[0m\n{stderr}")

        # Supprimer le fichier post_exploit.py après exécution
        print("\n\033[1;36mSuppression du script post_exploit.py...\033[0m")
        delete_remote_file(ssh_client, remote_file)
    
    except Exception as e:
        print(f"\033[1;31mErreur lors de la connexion ou du transfert : {e}\033[0m")
    finally:
        ssh_client.close()
        print("\033[1;36mConnexion SSH fermée.\033[0m")

if __name__ == "__main__":
  exec_post_exploit()
