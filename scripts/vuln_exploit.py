import time
import subprocess
import requests
from zapv2 import ZAPv2
from halo import Halo

def find_zap_executable():
    
    try:
        # Utiliser find pour localiser l'exécutable ZAP
        result = subprocess.run(['find', '/', '-name', 'zap.sh', '-type', 'f'], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        paths = result.stdout.splitlines()
        
        # Retourner le premier chemin trouvé
        if paths:
            return paths[0]
        else:
            print("\033[1;31m[!] Aucun exécutable ZAP trouvé.\033[0m")
            return None
    except Exception as e:
        print(f"\033[1;31m[!] Erreur lors de la recherche de ZAP : {e}\033[0m")
        return None

def is_zap_running(url, retries=10, delay=5):
    for _ in range(retries):
        try:
            response = requests.get(f"{url}/JSON/core/action/viewSessionList/")
            if response.status_code == 200:
                return True
        except requests.ConnectionError:
            pass
        print("\033[1;33m[*] Attente que ZAP démarre...\033[0m")
        time.sleep(delay)
    return False

def start_zap(zap_path, zap_port):
    print("\033[1;36m[*] Démarrage d'OWASP ZAP...\033[0m")
    subprocess.Popen([zap_path, '-daemon', '-port', str(zap_port)])
    time.sleep(30)

def scan_website():
    print("\n" + "╔" + "═" * 33 + "╗")
    print("║ Exploitation des vulnérabilités ║")
    print("╚" + "═" * 33 + "╝")

    target_url = input("\n\033[1;36mEntrez l'URL de la cible à scanner : \033[0m")
    print(f"\n[+] Démarrage du scan sur : {target_url}")

    # Configuration
    api_key = '2u8qa367ng6nsmspkm90etmnfv'
    zap_url = 'http://localhost:8080'
    zap_port = 8080

    # Trouver l'exécutable ZAP
    zap_path = find_zap_executable()
    if zap_path is None:
        print("\033[1;31m[!] Impossible de trouver l'exécutable ZAP.\033[0m")
        return
    
    # Vérifiez si ZAP est en cours d'exécution, sinon lancez-le
    with Halo(text='Vérification de ZAP en cours...', spinner='dots'):
        if not is_zap_running(zap_url):
            start_zap(zap_path, zap_port)
    
    try:
        zap = ZAPv2(apikey=api_key, proxies={'http': zap_url, 'https': zap_url})
        
        # Ouvrir une nouvelle session
        print("\033[1;36m[*] Création d'une nouvelle session...\033[0m")
        zap.core.new_session(name='new_session', overwrite=True)
        
        # Scanner passif
        print("\033[1;36m[*] Ouvrir l'URL cible...\033[0m")
        zap.urlopen(target_url)
        time.sleep(5)
        
        print("\033[1;36m[*] Début du scan actif...\033[0m")
        scan_id = zap.ascan.scan(target_url)

        with Halo(text='Scan en cours...', spinner='dots'):
            while int(zap.ascan.status(scan_id)) < 100:
                print(f"\033[1;33m[+] Progression du scan : {zap.ascan.status(scan_id)}%\033[0m")
                time.sleep(10)
        
        print("\033[1;32m[+] Scan terminé.\033[0m")
        
        # Obtenir les résultats du scan
        alerts = zap.core.alerts(baseurl=target_url)
        
        if alerts:
            print(f"\033[1;32m[+] {len(alerts)} vulnérabilité(s) trouvée(s) sur {target_url} :\033[0m")
            for alert in alerts:
                print(f"\033[1;33m    - {alert['alert']} à {alert['url']}\033[0m")
        else:
            print("\033[1;32m[+] Aucune vulnérabilité trouvée.\033[0m")
    
    except Exception as e:
        print(f"\033[1;31m[!] Erreur : {str(e)}\033[0m")

def vuln_exploit():
    scan_website()

if __name__ == '__main__':
    vuln_exploit()
